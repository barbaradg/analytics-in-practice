# -*- coding: utf-8 -*-
"""exam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ym-gudDLKDVWa-ElzFr9ItUzNuDAMYlL
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_excel('Deans_Dilemma.xlsx')

"""Questions on descriptive analytics

1.  Plot box plot to find outliers in salary
2.  Plot bar chart and make inference on how gender affects placements
3.  Plot scatter plot between students MBA percentage (Percent_MBA) and salary and what inferences can you draw from the chart?





"""

df.head()

sns.boxplot(data=df,y=df['Salary'])
plt.title('Boxplot Salary')
plt.show()

df['Gender'].value_counts()

df_male=df[df['Gender']=='M']
df_female=df[df['Gender']=='F']

sns.boxplot(data=df, x="Gender", y="Salary")
plt.title('Boxplot Salary for Gender')
plt.show()

df2=df.copy()
df2['Salary'] = pd.cut(df2['Salary'], 7).cat.codes

pd.cut(df2['Salary'], 7).value_counts()

salary_by_gender = df2.groupby(['Gender', 'Salary']).size().unstack()

salary_by_gender

salary_by_gender.plot(kind='bar', figsize=(10, 6))
plt.title('Salary by Gender')
plt.xlabel('Gender')
plt.ylabel('Quantity')
plt.xticks(rotation=0)
plt.legend(title='Salary')
plt.show()

plt.scatter(df['Percent_MBA'],df['Salary'])
plt.title('Scatter plot Percent MBA vs Salary')
plt.xlabel('Percent MBA')
plt.ylabel('Salary')
plt.plot()
#We can say that the percentage obtained after compleition of MBA is not a significant variant for the salary. We can see that even those students with realtivly high percent don't have high salary

"""Questions on hypothesis testing
*  Pablo claims that males students average salary is more than females. Test
this claim with
appropriate hypothesis test
* Test the claim that average salary received by computer science, commerce and arts students is
different (variable Stream_HSC). Test this claim using appropriate hypothesis test
"""

from scipy import stats
salary_male = df[df['Gender'] == 'M']['Salary']
salary_female = df[df['Gender'] == 'F']['Salary']

# Hypothesis testing
#H0: average(males salary)> average(females salary)
#H1: average(males salary)<= average(females salary)
#One tail test, t test
t_stat, p_value = stats.ttest_ind(salary_male, salary_female, alternative='greater',equal_var=False)
print(" t:", t_stat)
print(" p value (one tail):", p_value / 2)

alpha = 0.05  # significance value
if p_value / 2 < alpha and t_stat > 0:
    print("We reject H0")
else:
    print("We do not reject H0")

df['Stream_HSC'].value_counts()

salary_science = df[df['Stream_HSC'] == 'Science']['Salary']
salary_commerce = df[df['Stream_HSC'] == 'Commerce']['Salary']
salary_arts=df[df['Stream_HSC'] == 'Arts']['Salary']

# Hypothesis testing
#H0: average(computer science salary)= average(commerce salary)= average(computer science arts)
#H1: The averages are different
#Anova test
f_statistic, p_value = stats.f_oneway(salary_science, salary_commerce, salary_arts)
print(" f:", f_statistic)
print(" p value:", p_value )

alpha = 0.05  # significance value
if p_value < alpha:
    print("Reject H0")
else:
    print("Do not reject H0. We don't have enough evidence to say that the differences are significant")

"""Pablo wants to make a decision of admitting a student in his university based on their predicted salary
that they can get at the end of the course. Create multiple regression model which Pablo can use at
the time of admission of student to predict their salary. Find the significant variables in the prediction
model which Pablo should consider in making a decision and how these variables affect the final
predicted salary of a student.
Create model by following all steps of model development (data cleaning, missing value analysis,
outlier handling and correlation analysis). Present your model output in the form of a equation with
salary and outcome variable. Document clearly all your steps and inferences.
"""

df.info()

df_numeric= df.drop(['SlNo','Gender','Gender-B','Board_SSC','Board_CBSE','Board_ICSE','Board_HSC','Stream_HSC','Course_Degree','Entrance_Test','Specialization_MBA','Placement','Placement_B','S-TEST'], axis=1)
corr = df_numeric.corr()
f, ax = plt.subplots(figsize=(12, 10))
mask = np.triu(np.ones_like(corr, dtype=bool))
cmap = sns.diverging_palette(230, 20, as_cmap=True)
sns.heatmap(corr, annot=True, mask = mask, cmap=cmap)

# We remove S_TEST*SCORE because is the same as Perentile_ET.
#For the category variables, we evaluate with boxplots if there is a difference between the categories. We saw in these graphs that there is a difference.
#So we select those variables transformed

sns.boxplot(data=df, x="S-TEST", y="Salary")
plt.title('Boxplot Salary for Categorical variable X')
plt.ylim(0,600000)
plt.show()
#'SlNo','Gender','Gender-B','Board_SSC','Board_CBSE','Board_ICSE','Board_HSC','Stream_HSC','Course_Degree','Entrance_Test','Specialization_MBA','Placement','Placement_B','S-TEST'

df.iloc[:,10:26]

df['Course_Degree'].value_counts()

df_mod=df.copy()
df_mod['Stream_HSC'] = df_mod['Stream_HSC'].map({'Science': 0, 'Commerce': 1,'Arts':2})
df_mod['Specialization_MBA'] = df_mod['Specialization_MBA'].map({'Marketing & Finance': 0, 'Marketing & HR': 1,'Marketing & IB':2})
df_mod['Course_Degree'] = df_mod['Course_Degree'].map({'Management': 0, 'Commerce': 1,'Engineering':2,'Computer Applications':3,'Science':4,'Arts':5,'Others':6})
df_mod['Entrance_Test'] = df_mod['Entrance_Test'].map({'MAT': 0, 'K-MAT': 1,'CAT':2,'PGCET':3,'GCET':4,'G-MAT':5,'XAT':6,'G-SAT':7})
df_mod=df_mod.drop(['SlNo','Gender','Placement','Board_SSC','Board_HSC'], axis=1)
df_mod=df_mod.dropna()

X=df_mod.drop('Salary', axis=1)
y=df_mod['Salary']

import statsmodels.api as sm

X = sm.add_constant(X)
modelo = sm.OLS(y, X).fit()
print(modelo.summary())
#we can see that the most import variables are: Gender, Degree_Engg, Experience_Yrs, Entrance_Test, S-TEST, Specialization_MBA